name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# Workflow-level environment variables
env:
  APP_NAME: "URL Shortener App"
  GLOBAL_DEBUG: false
  PYTHON_VERSION: "3.10"

jobs:
  build-selfhosted-windows:
    runs-on: self-hosted && Windows
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: echo "Hello from Windows self-hosted runner!"
      
    # Postgres service container
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # Job-level environment Variables
    env:
      GLOBAL_DEBUG: true
      BUILD_STAGE: "Build Job"
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres to be ready
        run: |
          sleep 10  # Ensure DB container is ready

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run unit tests with coverage
        run: |
          pip install pytest pytest-cov
          export PYTHONPATH=.
          pytest --cov=./ --cov-report=xml

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true

      - name: Print variable scopes
        env:
          BUILD_STAGE: "Step Override"
          STEP_ONLY: "This only exists here"
        run: |
          echo "Workflow APP_NAME: $APP_NAME"
          echo "Job-level GLOBAL_DEBUG: $GLOBAL_DEBUG"
          echo "Job-level BUILD_STAGE: $BUILD_STAGE"
          echo "Step-level STEP_ONLY: $STEP_ONLY"
      
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Dummy deploy step
        run: echo "Deployment step would go here (e.g., Docker, SSH, Heroku, etc.)"
