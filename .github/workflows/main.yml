name: CI/CD Pipeline
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# Workflow-level environment variables
env:
  APP_NAME: "URL Shortener App"
  GLOBAL_DEBUG: false
  PYTHON_VERSION: "3.10"

jobs:
  build-selfhosted-windows:
    runs-on: [self-hosted, Windows]
      
    # Job-level environment Variables
    env:
      GLOBAL_DEBUG: true
      BUILD_STAGE: "Build Job"
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}

    steps:
      - name: Debug DATABASE_URL
        run: echo DATABASE_URL=${{ env.DATABASE_URL }}
        shell: cmd

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Say hello
        run: echo "Hello from Windows self-hosted runner!"

      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Start PostgreSQL with Docker
        shell: cmd
        run: |
          docker rm -f my_postgres || echo "Container not found"
          docker run -d --name my_postgres ^
          -p 5432:5432 ^
          -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} ^
          -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} ^
          -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} ^
          postgres:15
          
      - name: Check Postgres logs
        run: docker logs my_postgres
        shell: cmd

      - name: Wait for Postgres to be ready
        shell: powershell
        run: |
          Write-Host "Waiting for Postgres..."
          Start-Sleep -Seconds 20

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres to be ready
        run: |
          sleep 10  # Ensure DB container is ready

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                    
      - name: Run unit tests with coverage
        run: |
          pip install pytest pytest-cov
          $Env:PYTHONPATH = "."
          pytest --cov=./ --cov-report=xml

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true

      - name: Print variable scopes
        env:
          BUILD_STAGE: "Step Override"
          STEP_ONLY: "This only exists here"
        run: |
          echo "Workflow APP_NAME: $APP_NAME"
          echo "Job-level GLOBAL_DEBUG: $GLOBAL_DEBUG"
          echo "Job-level BUILD_STAGE: $BUILD_STAGE"
          echo "Step-level STEP_ONLY: $STEP_ONLY"
      
  deploy:
   needs: build-selfhosted-windows
   runs-on: [self-hosted, Windows]

   steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build Docker image
      run: docker build -t ghcr.io/archi1912/url-shortener:latest .

    - name: List local Docker images
      run: docker images

    #  Use PAT for login instead of GITHUB_TOKEN
    - name: Log in to GHCR with PAT (PowerShell)
      shell: powershell
      env:
        GHCR_PAT: ${{ secrets.GHCR_PAT }}
      run: |
        docker logout ghcr.io
        $GHCR_PAT | docker login ghcr.io -u archi1912 --password-stdin

    - name: Push Docker image
      run: docker push ghcr.io/archi1912/url-shortener:latest

    - name: Remove previous container if exists
      run: |
        if [ "$(docker ps -a -q -f name=url_shortener)" ]; then
          docker rm -f url_shortener
        else
          echo "No previous container"
        fi

    - name: Pull image from GitHub Packages
      run: docker pull ghcr.io/archi1912/url-shortener:latest

    - name: Run container locally
      run: docker run -d --name url_shortener -p 8000:8000 -e DATABASE_URL="${{ secrets.DATABASE_URL }}" ghcr.io/archi1912/url-shortener:latest

    - name: Wait for container startup
      run: sleep 10

    - name: List running containers
      run: docker ps
    
    - name: Show container logs
      run: docker logs url_shortener

    - name: Install Docker Compose plugin
      run: |
        mkdir -p ~/.docker/cli-plugins/
        curl -SL https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
        chmod +x ~/.docker/cli-plugins/docker-compose
    - name: Create .env file for Docker Compose
      shell: powershell
      run: |
        "@
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
          @" | Out-File -Encoding ASCII -FilePath .env
    - name: Start Docker Compose
      run: docker compose up -d

    - name: Wait for Postgres to be ready
      run: |
        for i in {1..30}; do
          docker compose exec db pg_isready -U postgres && break
          echo "Waiting for Postgres..."
          sleep 2
        done

    - name: Wait for app to be ready
      run: |
        for i in {1..15}; do
          curl --fail http://localhost:8000 && break
          echo "Waiting for app..."
          sleep 2
        done
        
    - name: Wait for app to start with retry
      run: |
        for i in {1..10}; do
          if curl --fail http://localhost:8000; then
            echo "App started"
            exit 0
          fi
          echo "Waiting for app..."
          sleep 3
        done
        echo "App failed to start in time"
        exit 1




